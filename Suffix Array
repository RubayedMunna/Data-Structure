


///suffix array
///-----------------
///Build Sffix Array

//vector<ll> sort_cyclic_shifts(string const& s){ll n = s.size();const ll alphabet = 256;vector<ll> p(n), c(n), cnt(max(alphabet, n), 0);for (ll i = 0; i < n; i++)cnt[s[i]]++;for (ll i = 1; i < alphabet; i++)cnt[i] += cnt[i-1];for (ll i = 0; i < n; i++)p[--cnt[s[i]]] = i;c[p[0]] = 0;ll classes = 1;for (ll i = 1; i < n; i++){if (s[p[i]] != s[p[i-1]])classes++;c[p[i]] = classes - 1;}vector<ll> pn(n), cn(n);for (ll h = 0; (1 << h) < n; ++h){for (ll i = 0; i < n; i++){pn[i] = p[i] - (1 << h);if (pn[i] < 0)pn[i] += n;}fill(cnt.begin(), cnt.begin() + classes, 0);for (ll i = 0; i < n; i++)cnt[c[pn[i]]]++;for (ll i = 1; i < classes; i++)cnt[i] += cnt[i-1];for (ll i = n-1; i >= 0; i--)p[--cnt[c[pn[i]]]] = pn[i];cn[p[0]] = 0;classes = 1;for (ll i = 1; i < n; i++){pair<ll, ll> cur = {c[p[i]], c[(p[i] + (1 << h)) % n]};pair<ll, ll> prev = {c[p[i-1]], c[(p[i-1] + (1 << h)) % n]};if (cur != prev)++classes;cn[p[i]] = classes - 1;}c.swap(cn);}return p;}

///Suffix Array Construction

//vector<ll> suffix_array_construction(string s){s += "$";vector<ll> sorted_shifts = sort_cyclic_shifts(s);sorted_shifts.erase(sorted_shifts.begin());return sorted_shifts;}

///Printing Indexes of sorted Suffix Arrays

//void print_suffix_array(string str){ll n=str.size();vector<ll>suff=suffix_array_construction(str);for(ll i=0;i<n;i++){cout<<suff[i]<<" ";}cout<<N;}

///Printing Sorted Suffix Arrays

//void print_suffix(string str){ll n=str.size();vector<ll>suff=suffix_array_construction(str);for(ll i=0;i<n;i++){cout<<suff[i]<<" ";for(ll j=suff[i];j<n;j++){cout<<str[j];}cout<<N;}cout<<N;}

///Finding a sub-string in a String

//ll find_substring(string str,string sub){ll n=str.size();ll m=sub.size();vector<ll>suff=suffix_array_construction(str);ll left=0;ll right=n-1;while(left<=right){ll mid=(left+right);if(sub.compare(0,m,str,suff[mid],m)==0){return suff[mid];}else if(sub.compare(0,m,str,suff[mid],m)<0){right=mid-1;}else{left=mid+1;}}return -1;}

///Longest Common Prefix (LCP) Array Construction

//vector<ll> lcp_construction(string s) {ll n = s.size();vector<ll>p=suffix_array_construction(s);vector<ll> rank(n, 0);for (ll i = 0; i < n; i++)rank[p[i]] = i;ll k = 0;vector<ll> lcp(n-1, 0);for (ll i = 0; i < n; i++) {if (rank[i] == n - 1) {k = 0;continue;}ll j = p[rank[i] + 1];while (i + k < n && j + k < n && s[i+k] == s[j+k])k++;lcp[rank[i]] = k;if (k)k--;}return lcp;}

///Finding Number of Different Substrings

//ll number_of_different_substring(string s){ll n=s.size();vector<ll>p=suffix_array_construction(s);vector<ll>lcp=lcp_construction(s);ll xx=0;for(ll i=0;i<=n-2;i++){xx+=lcp[i];}ll nods=((n*n)+n)/2;nods-=xx;return nods;}


///Suffix Array: Lexicographically K-th Smallest distinct Substring

/*

ll Rank[20][MAX];
ll arr[100000],cum[100000],lcp[100000];
struct Tuple{ll left,right,pos;};
bool compare(const Tuple &a, const Tuple &b){if(a.left==b.left){return a.right<b.right;}else{return a.left<b.left;}}
void counting_sort(Tuple t[], ll n){ll cnt[MAX+9];Tuple temp[n + 9];memset(cnt, 0, sizeof(cnt));for(ll i = 0 ; i < n ; i++){cnt[t[i].right + 1]++;}for(ll i = 1 ; i  < MAX ; i++){cnt[i] += cnt[i-1];}for(ll i = 0 ; i<n ; i++){temp[cnt[t[i].right +1] - 1] = t[i];cnt[t[i].right + 1]--;}memset(cnt, 0, sizeof(cnt));for(ll i = 0 ; i < n ; i ++){cnt[t[i].left + 1] ++;}for(ll i = 1 ; i<MAX ; i++){cnt[i] += cnt[i-1];}for(ll i = n- 1; i>=0 ; i--){t[cnt[temp[i].left + 1] - 1] = temp[i];cnt[temp[i].left + 1]--;}}
void suffix_array(string s,ll n){for(ll i=0; i<n; i++){Rank[0][i] = s[i] - 97;}Tuple t[n+9];for(ll stp = 1, cnt = 1 ; (cnt>>1) < n ; cnt<<=1, stp++){for(ll i=0; i<n; i++){t[i].left = Rank[stp-1][i];t[i].right = i+cnt < n ? Rank[stp-1][i + cnt] : -1;t[i].pos = i;}counting_sort(t, n);for(ll i=0; i<n; i++){Rank[stp][t[i].pos] = i > 0 && t[i-1].left == t[i].left && t[i-1].right == t[i].right ? Rank[stp][t[i-1].pos] : i;}}ll pos = ceil(log(n)/log(2));for(ll i = 0; i<n; i++){arr[Rank[pos][i]] = i;}}
ll LCP(ll i,ll j,ll n){ll cnt = 0;if(i == j)return n - i;for(ll stp = ceil(log(n)/log(2)) ; stp >= 0 && i < n && j < n ; stp --)if(Rank[stp][i] == Rank[stp][j]){cnt += 1<<stp;i += 1<<stp;j += 1<<stp;}return cnt;}
void lcpArray(ll sa[],ll n){lcp[0]=0;for(ll i=1; i<n; i++){lcp[i]=LCP(sa[i-1],sa[i],n);}}

*/

/// Main Function
/**
    string s;
    cin>>s;
    ll n=s.size();
    suffix_array(s,n);
    lcpArray(arr,n);
    cum[0]=n-arr[0];
    for(ll i = 1; i < n; i++)
    {
        cum[i] = cum[i-1] + (n - arr[i] - lcp[i]);
    }
    ll q;
    cin>>q;
    while(q--)
    {
        ll k;
        cin>>k;
        ll pos ;
        pos = lower_bound(cum,cum+n,k)-cum;
        ll i,j;
        for(ll j=0,i=arr[pos]; j<k-cum[pos-1]+lcp[pos]; j++,i++)
        {
            cout<<s[i];
        }
        cout<<N;
    }
    return 0;
***/


